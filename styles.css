/* Base styles
   -------------------------------------------------------------------------
   Define CSS variables for colors to improve maintainability and easy theme
   changes. All subsequent styles reference these variables rather than hard
   coded values.
*/
:root {
  --primary-color: #0d6efd;
  --primary-hover: #0a58ca;
  --light-bg: #f7f9fc;
  --card-bg: #f8f9fa;
  --text-color: #333;
  /* Controls how many columns the cards grid uses. This value is updated in media queries
     to ensure the layout scales gracefully on different screen sizes. */
  --columns: 3;

  /* Spacing scale for consistent paddings and margins throughout the
     application. Having a central spacing scale makes it easy to adjust
     whitespace globally without hunting through every selector. */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 2rem;

  /* Generic presentation tokens used throughout the site. These ensure that
     border radii and shadows are consistent across components and can be
     tweaked in a single place. */
  --border-radius: 6px;
  --shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Reset & typography */
body {
  margin: 0;
  font-family: Arial, sans-serif;
  line-height: 1.6;
  color: var(--text-color);
}

.container {
  width: 90%;
  max-width: 1200px;
  margin: 0 auto;
}

/* Header styles
   -------------------------------------------------------------------------
   The header uses flexbox to space the logo and navigation. The primary
   colour variables are used for background and interactive states.
*/
.site-header {
  background: var(--primary-color);
  color: #fff;
}

.site-header .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  /* Use spacing variables rather than hard coded values for vertical padding */
  padding: var(--spacing-md) 0;
}

.logo {
  margin: 0;
  font-size: 1.5rem;
}

  .navigation a {
    color: #fff;
    margin-left: 1rem;
    text-decoration: none;
    font-weight: 500;
  }

  .navigation a:hover {
    text-decoration: underline;
  }

/* Hero section
   -------------------------------------------------------------------------
   Large section introducing the product or service. Background uses a light
   colour variable, with generous padding and centred text.
*/
.hero {
  background: var(--light-bg);
  /* The hero section uses a larger vertical padding derived from the spacing scale */
  padding: calc(var(--spacing-lg) * 2) 0;
  text-align: center;
}

.hero h2 {
  margin-top: 0;
  font-size: 2rem;
}

.hero p {
  max-width: 600px;
  margin: 0.5rem auto 1.5rem;
}

/* Reusable button
   -------------------------------------------------------------------------
   Buttons share the primary colour; the hover state uses a darker shade.
*/
.btn {
  background: var(--primary-color);
  color: #fff;
  /* Button padding composed from the spacing scale. Horizontal and vertical values can
     be tweaked centrally via the variables defined in :root. */
  padding: calc(var(--spacing-sm) + var(--spacing-xs)) calc(var(--spacing-md) + var(--spacing-sm));
  border-radius: 4px;
  text-decoration: none;
  font-weight: bold;
  display: inline-block;
}

.btn:hover {
  background: var(--primary-hover);
}

/* Features cards
   -------------------------------------------------------------------------
   The cards are laid out using flexbox and wrap on smaller screens. Each card
   has a subtle shadow and rounded corners to create separation from the
   background.
*/
.features {
  /* Features section padding combines large and medium spacing for generous whitespace */
  padding: calc(var(--spacing-lg) + var(--spacing-md)) 0;
  background: #fff;
}

/* Container for feature cards
   -------------------------------------------------------------------------
   Use CSS Grid instead of flexbox to make the layout easier to scale. The
   number of columns is driven by the --columns variable defined above.
*/
.cards {
  display: grid;
  grid-template-columns: repeat(var(--columns), 1fr);
  gap: 1.5rem;
}

  .card {
    /* Grid layout now controls card sizing; remove flex property */
    background: var(--card-bg);
    /* Card padding uses the spacing scale for consistency */
    padding: calc(var(--spacing-md) + var(--spacing-sm));
    /* Apply shared presentation tokens for radius and shadow */
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
  }

.card h3 {
  margin-top: 0;
  margin-bottom: 0.5rem;
}

/* Footer
   -------------------------------------------------------------------------
   Simple centred footer with primary background colour.
*/
.site-footer {
  background: var(--primary-color);
  color: #fff;
  text-align: center;
  padding: 1rem 0;
}

/* Accessibility and focus styles
   -------------------------------------------------------------------------
   Provide clear focus outlines for interactive elements to help keyboard
   navigation users. The outline color ties into the primary theme colour.
*/
a:focus-visible,
button:focus-visible {
  outline: 3px solid var(--primary-color);
  outline-offset: 2px;
}

/* Dark mode support
   -------------------------------------------------------------------------
   Respect the user's system preference for dark mode by swapping out
   background and text colours using CSS variables. This improves
   readability in dark environments without requiring any JavaScript.
*/
@media (prefers-color-scheme: dark) {
  :root {
    --light-bg: #1a1b1e;
    --card-bg: #2a2b2f;
    --text-color: #f1f3f5;
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  /* Reduce the number of columns on medium screens */
  :root {
    --columns: 2;
  }
  .navigation {
    display: none;
  }
}

@media (max-width: 480px) {
  /* On very small screens, stack cards in a single column */
  :root {
    --columns: 1;
  }
}

/* Utility classes
   -------------------------------------------------------------------------
   These classes can be reused across multiple pages or components. They
   encapsulate common patterns such as visually hidden text and margin
   utilities. They are not currently used in this mock but provide a solid
   starting point for extension.
*/
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

.mt-2 { margin-top: 0.5rem; }
.mb-2 { margin-bottom: 0.5rem; }

.container--narrow {
  max-width: 800px;
}